---
ID: "ac05422c-a1b1-41ba-a1fd-4ec7e944de3b"
Parent: "01bb164c-5e8e-4c9b-941f-e5340bdd520c"
Template: "dd22f1b3-bd87-4db2-9e7d-f7a496888d43"
Path: /sitecore/system/Modules/PowerShell/Script Library/SPE/Core/Platform/Development/PowerShell Extensions Maintenance/Prepare Console Distribution
DB: master
SharedFields:
- ID: "b1a94ff0-6897-47c0-9c51-aa6acb80b1f0"
  Hint: Script
  Value: |
    Import-Function -Name New-PackagePostStep
    
    # Setup Chrome
    Get-Item -Path "master:{FE669C6E-5CE5-4A7D-B4D3-5039B4C6AE75}" | Invoke-Script
    
    $Version = "$((Get-Host).Version.Major).$((Get-Host).Version.Minor)-beta1"
    $currentYear = [datetime]::Today.ToString("yyyy")
    # Build Standard Package
    
    $package = New-Package "Sitecore PowerShell Extensions";
    $package.Sources.Clear();
    
    $package.Metadata.Author = "Adam Najmanowicz, Michael West";
    $package.Metadata.Publisher = "Sitecore PowerShell Extensions Team";
    $package.Metadata.Version = $Version;
    $package.Metadata.Readme = @"
    Welcome to the wonderful world of Sitecore PowerShell Extensions! 
    This package includes a Console, Integrated Scripting Environment, 
    and a variety of reports to help you maintain your solution.
    
    --------------------------------------------------------
    BEFORE UPGRADING THE MODULE
    * Backup your script library!
    
    AFTER UPGRADING THE MODULE
    * Clean your browser cache!
    * Test all of your custom scripts!
    * Rebuild the integration points
    --------------------------------------------------------
    This module includes ready-to-use tools and a
    variety of samples for you to explore.
    
    Documentation: https://doc.sitecorepowershell.com
    Detailed release notes: https://bit.ly/speReleaseNotes
    Issue tracker: https://bit.ly/ScPsIss
    
    Thank you for using Sitecore PowerShell Extensions!
    
    Copyright (c) 2010-$($currentYear) Adam Najmanowicz
    Copyright (c) 2013-$($currentYear) Michael West
    
    Additional Resources:
    https://sitecorepowershell.com/
    https://blog.najmanowicz.com/
    https://michaellwest.blogspot.com/
    "@
    $newPackageFiles = @(
        [PSCustomObject]@{"FileName"="/App_Config/Include/Cognifide.PowerShell.config"},
        [PSCustomObject]@{"FileName"="/App_Config/Include/Cognifide.PowerShell.Events.config.disabled"},
        [PSCustomObject]@{"FileName"="/App_Config/Include/Cognifide.PowerShell.IdentityServer.config.disabled"},
        [PSCustomObject]@{"FileName"="/App_Config/Include/Cognifide.PowerShell.Minimal.config.disabled"},
        [PSCustomObject]@{"FileName"="/App_Config/Include/z.Cognifide.PowerShell.config"},
        [PSCustomObject]@{"FileName"="/bin/Cognifide.PowerShell.dll"},
        [PSCustomObject]@{"FileName"="/bin/Cognifide.PowerShell.Abstractions.dll"},
        [PSCustomObject]@{"FileName"="/bin/Cognifide.PowerShell.Package.dll"}
        [PSCustomObject]@{"FileName"="/bin/Cognifide.PowerShell.VersionSpecific.dll"}
    )
    $package.Metadata.PostStep = "Spe.Package.Install.PackagePostStep, Spe.Package"
    $package.Metadata.Comment = New-PackagePostStep -PackageFiles $newPackageFiles
    
    
    # Item templates
    $source = Get-Item 'master:\templates\Modules' | New-ExplicitItemSource -Name 'Master Item Templates Module Node' -InstallMode Merge -MergeMode Merge
    $package.Sources.Add($source);
    $source = Get-Item 'master:\templates\Modules\PowerShell Console' | New-ItemSource -Name 'Master Item Templates' -InstallMode Overwrite
    $package.Sources.Add($source);
    
    # Module Root
    $source = Get-Item 'master:\system\Modules\PowerShell' | New-ExplicitItemSource -Name "Master Module Root" -InstallMode Merge -MergeMode Merge
    $package.Sources.Add($source);
    
    # Colors
    $source = Get-Item 'master:\system\Modules\PowerShell\Console Colors' | New-ItemSource -Name "Master Colors" -InstallMode Overwrite
    $package.Sources.Add($source);
    
    # Fonts
    $source = Get-Item 'master:\system\Modules\PowerShell\Fonts' | New-ItemSource -Name "Master Fonts" -InstallMode Overwrite
    $package.Sources.Add($source);
    
    # Rules Engine - Tag Definition
    $source = Get-Item "master:/system/Settings/Rules/Definitions/Tags/PowerShell" | New-ItemSource -Name "Rules - Tag Definition" -InstallMode Overwrite
    $package.Sources.Add($source);
    
    # Rules Engine - Ise Plugins Tag Definition
    $source = Get-Item "master:/system/Settings/Rules/Definitions/Tags/PowerShell ISE" | New-ItemSource -Name "ISE Plugin Rules - Tag Definition" -InstallMode Overwrite
    $package.Sources.Add($source);
    
    # Rules Engine - Ise Experience Buttons Tag Definition
    $source = Get-Item "master:\system\Settings\Rules\Definitions\Tags\PowerShell Experience Buttons" | New-ItemSource -Name "ISE Experience Buttons Rules - Tag Definition" -InstallMode Overwrite
    $package.Sources.Add($source);
    
    # Rules Engine - Rules
    $source = Get-Item "master:/system/Settings/Rules/Definitions/Elements/PowerShell" | New-ItemSource -Name "Rules" -InstallMode Overwrite
    $package.Sources.Add($source);
    
    # Rules Engine - Ise Experience Buttons Rules
    $source = Get-Item "master:\system\Settings\Rules\Definitions\Elements\PowerShell Experience Buttons" | New-ItemSource -Name "Ise Experience Buttons Rules" -InstallMode Overwrite
    $package.Sources.Add($source);
    
    # Rules Engine - Ise Plugin Rules
    $source = Get-Item "master:/system/Settings/Rules/Definitions/Elements/PowerShell ISE" | New-ItemSource -Name "Ise Plugin Rules" -InstallMode Overwrite
    $package.Sources.Add($source);
    
    # Rules Engine - Security Rules
    $source = Get-Item "master:/system/Settings/Rules/Definitions/Elements/PowerShell Security" | New-ItemSource -Name "Security Rules" -InstallMode Overwrite
    $package.Sources.Add($source);
    
    # Rules Engine - Source Definition
    $source = Get-Item "master:/system/Settings/Rules/PowerShell" | New-ItemSource -Name "Rules Source" -InstallMode Overwrite
    $package.Sources.Add($source);
    
    # Script Library
    $source = Get-Item 'master:\system\Modules\PowerShell\Script Library' | New-ExplicitItemSource -Name "Master Script Library" -InstallMode Merge -MergeMode Clear
    $package.Sources.Add($source);
    $source = Get-Item 'master:\system\Modules\PowerShell\Script Library\SPE' | New-ItemSource -Name "Master Script Library Content" -InstallMode  Overwrite
    $package.Sources.Add($source);
    
    # Settings
    $source = @(Get-Item -Path "master:\system\Modules\PowerShell\Settings") + (Get-ChildItem -Path "master:\system\Modules\PowerShell\Settings") + (Get-ChildItem "All Users" -Path "master:\system\Modules\PowerShell\Settings" -Recurse) | New-ExplicitItemSource -Name "Settings" -InstallMode Merge -MergeMode Clear
    $package.Sources.Add($source);
    
    # Snippets
    $source = @(Get-Item -Path "master:\system\Modules\PowerShell\Snippets") + (Get-ChildItem -Path "master:\system\Modules\PowerShell\Snippets" -Recurse) | New-ExplicitItemSource -Name "Snippets" -InstallMode Merge -MergeMode Clear
    $package.Sources.Add($source);
    
    # Applications
    $source = Get-Item "core:\content\Applications\PowerShell" | New-ItemSource -Name "Applications" -InstallMode Overwrite
    $package.Sources.Add($source);
    
    # PowerShell Dictionary - translation strings
    $source = Get-Item "core:\system\Dictionary\PowerShell" | New-ItemSource -Name "Applications" -InstallMode Overwrite
    $package.Sources.Add($source);
    
    # Application Layouts
    $source = Get-ChildItem 'core:\layout\Layouts\Applications\PowerShell' -WithParent |
        Where-Object { $_.ID -ne "{7337304D-5FF4-41B9-ABB2-2FF1875BA110}" <# Skip Reporting #> } |
        New-ExplicitItemSource "Application Layouts" -InstallMode Overwrite
    $package.Sources.Add($source);
    
    # Start Menu
    $source = Get-ChildItem '*PowerShell*' -path 'core:/content/Documents and settings/All users/Start menu/' -Recurse | New-ExplicitItemSource "Start Menu Icons" -InstallMode Overwrite
    $package.Sources.Add($source);
    
    # Content Editor Context Menu integration
    $source = Get-ChildItem '*PowerShell*' -path 'core:/content/Applications/Content Editor/Context Menues/Default/' -Recurse | New-ExplicitItemSource "Content Editor Context Menu integration #1" -InstallMode Merge -MergeMode Clear
    $package.Sources.Add($source);
    $source = Get-Item 'core:/content/Applications/Content Editor/Context Menues/Default/Edit Script/' | New-ExplicitItemSource "Content Editor Context Menu integration #2" -InstallMode Merge -MergeMode Clear
    $package.Sources.Add($source);
    
    # LaunchPad
    if([CurrentSitecoreVersion]::IsAtLeast([SitecoreVersion]::V80)){
    $source = Get-Item 'core:/sitecore/client/Applications/Launchpad/PageSettings/Buttons/ContentEditing/PowerShell ISE' | New-ItemSource -Name "LaunchPad integration" -InstallMode Overwrite
    $package.Sources.Add($source);
    }
    
    # Task Integration
    $source = Get-Item master:\system\Tasks\Commands\PowerShellScriptCommand | New-ItemSource -Name "Task Integration - Command" -InstallMode Overwrite
    $package.Sources.Add($source);
    
    # Files
    $source = Get-Item "$AppPath\App_Config\Include\Spe\*.*" | 
        Where-Object { -not $_.Name.Contains("Serialization") -and -not $_.Name.Contains("User") } | New-ExplicitFileSource -Name "Configuration Files"
    $package.Sources.Add($source);
    $source = Get-Item "$AppPath\App_Config\Include\z.Spe\*.*" | 
        Where-Object { -not $_.Name.Contains("Serialization") -and -not $_.Name.Contains("User") } | New-ExplicitFileSource -Name "Configuration Files"
    $package.Sources.Add($source);
    
    $source = Get-Item "$AppPath\bin\Spe*.dll" | New-ExplicitFileSource -Name "PowerShell Binaries"
    $package.Sources.Add($source);
    $source = Get-Item "$AppPath/sitecore/shell/Themes/Standard/PowerShell.zip" | New-ExplicitFileSource -Name "Icons"
    $package.Sources.Add($source);
    $source = Get-ChildItem -exclude *.cs -Path "$AppPath\sitecore modules\PowerShell\" -filter "*.*" -Recurse -File | New-ExplicitFileSource -Name "Console Assets"
    $package.Sources.Add($source);
    $source = Get-ChildItem -exclude *.cs -Path "$AppPath\sitecore modules\Shell\PowerShell\" -filter "*.*" -Recurse -File | New-ExplicitFileSource -Name "Console Controls"
    $package.Sources.Add($source);
    $source = Get-Item -Path "$AppPath\sitecore\shell\version\Modules\Sitecore PowerShell Extensions.version" | New-ExplicitFileSource -Name "Product Version File"
    $package.Sources.Add($source);
    
    #Security Roles
    $source = Get-Role -Identity "sitecore\PowerShell Extensions Remoting" | New-SecuritySource -Name "Remoting Role" 
    $package.Sources.Add($source);
    
    
    $packageName = "$($package.Name)-$Version" -replace " ",".";
    Export-Package -Project $package -Path "$packageName.xml"
    Export-Package -Project $package -Path "$packageName.zip" -Zip
    Download-File "$SitecorePackageFolder\$packageName.zip"
    
    Import-Function -Name Compress-Archive
    
    # Build Minimal Package
    
    $minimalPackageName = "$($SitecorePackageFolder)\SPE.Minimal-$($Version).zip"
    
    Compress-Archive -Path "$($AppPath)App_Config" -DestinationPath $minimalPackageName -Include "Spe.config", "Spe.Minimal.config.disabled" > $null
    Compress-Archive -Path "$($AppPath)bin" -DestinationPath $minimalPackageName -Include "Spe.dll","Spe.Abstractions.dll" -Update > $null
    Compress-Archive -Path "$($AppPath)sitecore modules" -DestinationPath $minimalPackageName -Include "web.config", "RemoteAutomation.asmx", "RemoteScriptCall.ashx" -Update > $null
    
    # Build Remoting Package
    
    $config = [Sitecore.Configuration.Factory]::GetConfiguration()
    $speSourceFolder = $config.sitecore."sc.variable" | Where-Object { $_.Name -eq "speSourceFolder" } | Select-Object -First 1 -Expand value
    $speSourceFolderItem = Get-Item -Path $speSourceFolder
    $modulePath = "$($speSourceFolderItem.Parent.FullName)\Modules\SPE"
    if(Test-Path -Path $modulePath) {
        $remotingPackageName = "$($SitecorePackageFolder)\SPE Remoting-$($Version).zip"
        
        Compress-Archive -Path $modulePath -DestinationPath $remotingPackageName > $null
    }
    
    # Build Standard Package
    
    $package = New-Package "Sitecore PowerShell Extensions - Authorable Reports";
    $package.Sources.Clear();
    
    $package.Metadata.Author = "Adam Najmanowicz, Michael West";
    $package.Metadata.Publisher = "Sitecore PowerShell Extensions Team";
    $package.Metadata.Version = $Version;
    $package.Metadata.Readme = @"
    This module provides a reporting dashboard and additional reports
    to complement those included with Sitecore PowerShell Extensions. 
    
    Documentation: https://doc.sitecorepowershell.com
    
    Thank you for using Sitecore PowerShell Extensions.
    
    Copyright (c) 2010-$($currentYear) Adam Najmanowicz
    Copyright (c) 2013-$($currentYear) Michael West
    
    Additonal Resources:
    https://sitecorepowershell.com/
    https://blog.najmanowicz.com/
    https://michaellwest.blogspot.com/
    "@
    
    # Item templates
    $source = Get-Item 'master:\templates\Modules\PowerShell Authorable Reports' | New-ItemSource -Name 'Master Item Templates' -InstallMode Overwrite
    $package.Sources.Add($source);
    
    # Authorable Reports
    $source = Get-Item -Path "master:" -ID "{1BBD1A29-8A08-413D-8F6E-01D3EC017F4D}" | New-ItemSource -Name 'Master Item Templates' -InstallMode Overwrite
    $package.Sources.Add($source);
    
    # Application Layouts
    $source = Get-Item 'core:' -ID "{7337304D-5FF4-41B9-ABB2-2FF1875BA110}" | New-ExplicitItemSource "Application Layouts" -InstallMode Overwrite
    $package.Sources.Add($source);
    
    # Applications
    $source = Get-Item "core:" -ID "{26FB797C-ED1F-4C34-8EA2-E339686855BC}" | New-ItemSource -Name "Applications" -InstallMode Overwrite
    $package.Sources.Add($source);
    
    $source = Get-Item 'core:/sitecore/client/Applications/Launchpad/PageSettings/Buttons/ContentEditing/PowerShell Reports' | New-ItemSource -Name "LaunchPad integration" -InstallMode Overwrite
    $package.Sources.Add($source);
    
    $packageName = "$($package.Name)-$Version" -replace " - ","-" -replace " ",".";
    Export-Package -Project $package -Path "$packageName.zip" -Zip
    Download-File "$SitecorePackageFolder\$packageName.zip"
Languages:
- Language: en
  Versions:
  - Version: 1
    Fields:
    - ID: "25bed78c-4957-4165-998a-ca1b52f67497"
      Hint: __Created
      Value: 20130510T150325
