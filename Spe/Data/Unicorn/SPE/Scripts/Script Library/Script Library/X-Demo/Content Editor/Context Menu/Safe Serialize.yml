---
ID: "a8a704dd-0ee1-4df6-afc4-e166726147be"
Parent: "dbd254b8-cdc2-4edd-9ade-7baaa6294401"
Template: "dd22f1b3-bd87-4db2-9e7d-f7a496888d43"
Path: "/sitecore/system/Modules/PowerShell/Script Library/X-Demo/Content Editor/Context Menu/Safe Serialize"
DB: master
SharedFields:
- ID: "06d5295c-ed2f-4a54-9bf2-26228d113318"
  Hint: __Icon
  Value: Office/32x32/serialize_item.png
- ID: "b1a94ff0-6897-47c0-9c51-aa6acb80b1f0"
  Hint: Script
  Value: |
    $monitoredDateFields = "__Created","__Updated","__Valid from","__Valid to","__Publish","__Unpublish","__Archive date","__Reminder date","__Archive Version date"
    $dryRun = $false;
    $officeIcons = @{};
    $updateItems = $false;
    
    function ConvertTo-LegacyDate {
    	[CmdletBinding()]
    	param(
    		[Parameter(Mandatory = $true,Position = 0,ValueFromPipeline = $true)]
    		[ValidateNotNullOrEmpty()]
    		[item]$Item,
    		[switch]$Recurse
    	)
    
    	process {
    		$needsFixing = $false
    
    		foreach ($field in $monitoredDateFields) {
    			if ($item.Fields[$field].HasValue -and $item.Fields[$field].Value.EndsWith("Z"))
    			{
    				$needsFixing = $true;
    				break;
    			}
    		}
    		if ($needsFixing) {
    			$item.Editing.BeginEdit();
    			foreach ($field in $monitoredDateFields) {
    				if ($item.Fields[$field].HasValue -and $item.Fields[$field].Value.EndsWith("Z"))
    				{
    					Write-Host "$($item.ProviderPath), Fixing $field, $($item.Fields[$field].Value) " -f Green
    					$item.Fields[$field].Value = $item.Fields[$field].Value.TrimEnd('Z');
    				}
    			}
    			$item.Editing.EndEdit($false,$false) | Out-Null
    		}
    		if ((-not $dryRun) -and $item.Fields["__Final Renderings"].HasValue) {
    			$item.Editing.BeginEdit();
    			$item.Fields["__Final Renderings"].Reset()
    			$item.Editing.EndEdit($false,$false);
    		}
    		if ($item.ProviderPath.StartsWith("core:") -and ($item.__Icon -match "Office/")) {
    			$officeIcons[$item.ProviderPath] = $item.__Icon;
    		}
    		if ($item.ProviderPath.StartsWith("core:") -and ($item.Icon -match "Office/")) {
    			$officeIcons[$item.ProviderPath] = $item.Icon;
    		}
    
    		if ($item.ProviderPath.StartsWith("core:") -and ($item.Icon -match "Apps/")) {
    			$officeIcons[$item.ProviderPath] = $item.Icon;
    		}
    
    		if ($Recurse) {
    			Write-Verbose "$($item.ProviderPath), Going deep"
    			Get-ChildItem $item.ProviderPath -Recurse | ConvertTo-LegacyDate -Recurse
    		}
    	}
    }
    
    function Process-Item {
    	[CmdletBinding()]
    	param(
    		[Parameter(Mandatory = $true,ValueFromPipeline = $true)]
    		[ValidateNotNullOrEmpty()]
    		[item]$Item,
    
    		[Parameter()]
    		[string]$Activity,
    
    		[Parameter()]
    		[int]$PercentComplete,
    
    		[Parameter()]
    		[switch]$Recurse
    	)
    
    	process {
    
    		if ($PercentComplete -ne 0) {
    
    			$TheActivity = @{ $true = 'Deserializing '; $false = 'Serializing ' }[$updateItems] + "$Activity"
    			Write-Verbose "$TheActivity $PercentComplete%"
    			Write-Progress -Activity $TheActivity -PercentComplete $PercentComplete
    		}
    		Write-Verbose "$($item.ProviderPath), $Recurse"
    
    		$allLangs = Get-Item -Path $Item.ProviderPath -Language *
    		foreach($langItem in $allLangs){
        		ConvertTo-LegacyDate -Item $langItem -Recurse:$Recurse
    		}
    
        	if (-not $dryRun) {
        		if ($updateItems) {
        			Import-Item $langItem -Recurse:$Recurse -ForceUpdate
        		} else {
        			Export-Item $langItem -Recurse:$Recurse
        		}
    		}
    	}
    }
    
    Get-Item -Path . | Process-Item -Activity "Serializing selected item" -PercentComplete 97
    Close-Window
Languages:
- Language: en
  Versions:
  - Version: 1
    Fields:
    - ID: "25bed78c-4957-4165-998a-ca1b52f67497"
      Hint: __Created
      Value: 20170111T042752Z
