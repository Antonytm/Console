---
ID: "d235c6c5-a6f4-4e67-a6e8-90d3b52a7ae4"
Parent: "2e6b80d8-3ae6-427e-9ca0-7cc9197efaed"
Template: "dd22f1b3-bd87-4db2-9e7d-f7a496888d43"
Path: "/sitecore/system/Modules/PowerShell/Script Library/X-Demo/Toolbox/Package Manager"
DB: master
SharedFields:
- ID: "06d5295c-ed2f-4a54-9bf2-26228d113318"
  Hint: __Icon
  Value: Office/32x32/cloud_refresh.png
- ID: "b1a94ff0-6897-47c0-9c51-aa6acb80b1f0"
  Hint: Script
  Value: |
    Close-Window
    
    if (![Net.ServicePointManager]::SecurityProtocol.HasFlag([Net.SecurityProtocolType]::Tls12)) {
        [Net.ServicePointManager]::SecurityProtocol += [Net.SecurityProtocolType]::Tls12
    }
    
    function New-CheckboxControl {
        param(
            [string]$Name,
            [string]$Title,
            [bool]$Value,
            [string]$Tooltip
        )
        
        $PSBoundParameters -as [hashtable]
    }
    
    function New-CheckboxListControl {
        param(
            [string]$Name,
            [string]$Title,
            [object]$Options,
            [string]$Tooltip
        )
        
        $parameters = $PSBoundParameters -as [hashtable]
        $parameters["Editor"] = "checklist"
        
        $parameters
    }
    
    function New-RadioListControl {
        param(
            [string]$Name,
            [string]$Title,
            [object]$Options,
            [string]$Tooltip
        )
        
        $parameters = $PSBoundParameters -as [hashtable]
        $parameters["Editor"] = "radio"
        
        $parameters
    }
    
    function New-ComboboxControl {
        param(
            [string]$Name,
            [string]$Title,
            [object]$Options,
            [string]$Tooltip
        )
        
        $PSBoundParameters -as [hashtable]
    }
    
    Write-Host "Loading the list of available modules."
    
    $packageData = @"
    [{
        "Name": "Sitecore PowerShell Extensions",
        "Source": "Github",
        "SpeVersion": 4.6,
        "Pattern": "Sitecore.PowerShell.Extensions-4.?.for.Sitecore.$($SitecoreVersion.Major).zip",
        "Owner": "SitecorePowerShell",
        "Repo": "Console"
    },
    {
        "Name": "Richard Seal - Unlock User",
        "Source": "Direct",
        "SpeVersion": 4.0,
        "FileName": "SitecoreNutsandBoltsUnlockUser.zip",
        "DownloadUrl": "https://www.sitecorenutsbolts.net/2016/11/01/Right-Click-Unlock-Item-with-Sitecore-PowerShell-Extensions/SitecoreNutsandBoltsUnlockUser.zip"
    },
    {
        "Name": "Marc Duiker - Workflow Management",
        "Source": "Direct",
        "SpeVersion": 4.0,
        "FileName": "Workflow Management SPE Module-1.0.zip",
        "DownloadUrl": "https://github.com/marcduiker/SPE-Modules/blob/master/sitecore-packages/Workflow%20Management%20SPE%20Module-1.0.zip"
    }]
    
    "@
    
    $moduleTable = [ordered]@{}
    $packageManifests = $packageData | ConvertFrom-Json
    $packageManifests | ForEach-Object { 
        $moduleTable[$_.Name] = $_ 
    }
    
    $selectedModuleId = $null
    $options = [ordered]@{}
    foreach($name in $moduleTable.Keys) {
        $options["$($name)"] = $name
    }
    
    $defaultProps = @{
        Title = "Package Manager"
        Icon = "Apps/32x32/Packager.png"
        ShowHints = $true
    }
    
    $props = @{
        "Description" = "Choose module to find list of available packages."
        "OkButtonName" = "Continue"
        "CancelButtonName" = "Quit"
        "Parameters" = @(
            (New-ComboboxControl -Name "selectedModuleId" -Title "Available Modules" -Options $options -Tooltip "Choose a module to view available packages.")
        )
    } + $defaultProps
    
    $result = Read-Variable @props
    
    if($result -ne "ok") {
        exit
    }
    
    Write-Host "Building list of available packages..."
    $packages = [ordered]@{}
    function Get-GithubAsset {
        param(
            [string]$Name,
            [string]$Owner,
            [string]$Repo
        )
        
        $githubApiUrl = "https://api.github.com/repos/$($Owner)/$($Repo)/releases"
        
        $response = Invoke-WebRequest -Uri $githubApiUrl -UseBasicParsing | Select-Object -Expand Content
        $releaseData = $response | ConvertFrom-Json
        
        $assets = $releaseData.assets | Where-Object { $_.name -like $Name }
        foreach($asset in $assets){
            $packageMetadata = [PSCustomObject]@{
                "id" = $asset.id
                "name" = $asset.name
                "size" = [Math]::Round($asset.size/1MB, 2)
                "downloadurl" = $asset.browser_download_url
            }
            
            $packageMetadata
        }
    }
    
    if($moduleTable[$selectedModuleId].Source -eq "Github") {
        $githubAssets = Get-GithubAsset -Name "Sitecore.PowerShell.Extensions-4.?.for.Sitecore.8.zip" -Owner "SitecorePowerShell" -Repo "Console"
        
        foreach($githubAsset in $githubAssets) {
            $packages[$githubAsset.name] = $githubAsset
        }
    } elseif($moduleTable[$selectedModuleId].Source -eq "Direct") {
        $packages[$selectedModuleId] = $moduleTable[$selectedModuleId]
    }
    
    Write-Host "Available package count: $($packages.Count)."
    
    $selectedPackageIds =  @()
    $options = [ordered]@{}
    foreach($key in $packages.Keys) {
        $package = $packages[$key]
        $options["$($package.Name)"] = $key
    }
    
    $props = @{
        "Description" = "Download and install packages from the list below."
        "OkButtonName" = "Finish"
        "CancelButtonName" = "Quit"
        "Parameters" = @(
            (New-ComboboxControl -Name "selectedPackageId" -Title "Available Packages" -Options $options -Tooltip "Choose a package to download and install."),
            (New-CheckboxControl -Name "skipInstall" -Value $true -Title "Skip install" -Tooltip "Download only")
        )
    } + $defaultProps
    
    $result = Read-Variable @props
    
    if($result -ne "ok") {
        exit
    }
    
    $outDirectory = "$($SitecorePackageFolder)\packagemanager"
    if(-not(Test-Path -Path $outDirectory)) {
        New-Item -ItemType Directory -Path $outDirectory | Out-Null
    }
    
    function Get-WebFile {
        param(
            [string]$Name,
            [string]$Url
        )
        
        Write-Host "Downloading package details for $($Name)."
    
        $request = [System.Net.WebRequest]::Create($Url)
        $request.Method = "GET"
        $response = $null
        try {
            $response = $request.GetResponse()
        } catch {
            $_
            Write-Host "Package $($Name) does not exist."
            continue
        }
        $fUri = $response.ResponseUri
        $response.Close()
        
        $filename = $name
        $installPackages += $name
        Write-Host "Downloading package $($filename)..."
        (New-Object System.Net.WebClient).DownloadFile($url, "$($outDirectory)\$($filename)")
        Write-Host "Download complete."
    }
    
    $downloadedPackage = Get-WebFile -Name $packages[$selectedPackageId].name -Url $packages[$selectedPackageId].downloadurl
    
    if($skipInstall) {
        Write-Host "Skipping installation."
    } else {
        Write-Host "Installing package $($downloadedPackage)..."
        Install-Package -Path "$($outDirectory)\$downloadedPackage"
        Write-Host "Installation complete."
    }
    
    Write-Host "Terminating Package Manager."
- ID: "ba3f86a2-4a1c-4d78-b63d-91c2779c1b5e"
  Hint: __Sortorder
  Value: 100
Languages:
- Language: en
  Fields:
  - ID: "9541e67d-ce8c-4225-803d-33f7f29f09ef"
    Hint: __Short description
    Value: Provides a simple UI for downloading and installing modules.
  Versions:
  - Version: 1
    Fields:
    - ID: "25bed78c-4957-4165-998a-ca1b52f67497"
      Hint: __Created
      Value: 20170101T064853Z
